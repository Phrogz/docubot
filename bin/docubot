#!/usr/bin/env ruby -KU
# encoding: UTF-8

# Hack to allow the binary to be run without the gem installed
$: << File.join( File.dirname( __FILE__ ), '..', 'lib' )

require 'rubygems'
require 'docubot'

USAGE = <<ENDUSAGE
Usage:
   docubot [-h] [create [-s shell] [-f]] directory [-w writer] [-o output_file]
ENDUSAGE

HELP = <<ENDHELP
   -h, --help    Show this help.
   create        Create a starter directory filled with example files;
                 also copies the template for easy modification, if desired.
   -s, --shell   The shell to copy from.
                 Available shells: #{DocuBot::SHELLS.join(', ')}
   -f, --force   Force create over an existing directory,
                 deleting any existing files.
   -w, --writer  The output type to create [Defaults to 'chm']
                 Available writers: #{DocuBot::Writer::INSTALLED_WRITERS.join(', ')}
   -o, --output  The file or folder (depending on the writer) to create.
                 [Default value depends on the writer chosen.]

ENDHELP

ARGS = { :shell=>'default', :writer=>'chm' }
UNFLAGGED_ARGS = [ :directory ]
next_arg = UNFLAGGED_ARGS.first
ARGV.each{ |arg|
	case arg
		when '-h','--help'
		  ARGS[:help] = true
		when 'create'
		  ARGS[:create] = true
		when '-f','--force'
		  ARGS[:force] = true
		when '-s','--shell'
			next_arg = :shell
		when '-w','--writer'
			next_arg = :writer
		when '-o','--output'
			next_arg = :output
		else
			if next_arg
				ARGS[next_arg] = arg
				UNFLAGGED_ARGS.delete( next_arg )
			end
			next_arg = UNFLAGGED_ARGS.first
	end
}

if ARGS[:help] or !ARGS[:directory]
	puts USAGE
	puts HELP if ARGS[:help]
	exit
end

if ARGS[:create]
	require 'fileutils'

	unless DocuBot::SHELLS.include?( ARGS[:shell] )
		puts "  Error: '#{ARGS[:shell]}' is not a valid shell.",
		     "  Available shells: #{DocuBot::SHELLS.join(', ')}",
		     "  (Shells are installed in #{DocuBot::DIR/'shells'})", ""
		exit 1
	end

	if File.exist?( ARGS[:directory] )
		if ARGS[:force]
			# TODO: confirmation?
			# TODO: May be able to just use :force=>true for cp_r
			FileUtils.rm_rf( ARGS[:directory] )
		else
			puts "  Error: directory '#{ARGS[:directory]}' already exists.",
			     "  Use the --force option to forcibly overwrite.", ""
			exit 1
		end
	end

	dest = File.expand_path( ARGS[:directory] )
	src  = File.expand_path( DocuBot::SHELL_DIR/ARGS[:shell] )
	puts "  Creating:   #{dest}",
	     "  as copy of: #{src}", ""	
	
	# Copy template files first so that the shell can overwrite if it wants
	FileUtils.mkdir_p( dest )
	FileUtils.cp_r( DocuBot::TEMPLATE_DIR, dest/'_templates' )
	
	Dir.chdir src do
		Dir['**/*.*'].each do |file|
			dest_file = dest/file
			dest_dir  = File.dirname(dest_file)
			FileUtils.mkdir_p( dest_dir )
			FileUtils.cp( file, dest_file )
		end
	end
else
	start = Time.now
	bundle = DocuBot::Bundle.new( ARGS[:directory] )
	lap = Time.now
	puts "%.1fs to prepare the bundle..." % (lap-start)
	bundle.write( ARGS[:writer], ARGS[:output] )
	puts "%.1fs to write everything." % (Time.now-lap)
end

